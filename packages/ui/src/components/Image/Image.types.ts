export interface ImageProps {
	/**
	 * Соотношение сторон изображения. Может быть строкой в формате "width/height" (например, "16/9")
	 * или "auto" для автоматического определения.
	 * @default "1/1"
	 */
	aspectRatio?: string

	/**
	 * Определяет, как изображение должно быть вписано в контейнер.
	 * Используется стандартное CSS-свойство `object-fit`.
	 * - "cover": Изображение заполняет контейнер, сохраняя соотношение сторон (может обрезаться).
	 * - "contain": Изображение вписывается в контейнер целиком, сохраняя соотношение сторон.
	 * - "fill": Изображение растягивается на весь контейнер, игнорируя соотношение сторон.
	 * - "none": Изображение отображается в исходном размере.
	 * - "scale-down": Изображение масштабируется до минимального размера, чтобы вписаться в контейнер.
	 * @default "fill"
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit
	 */
	objectFit?: React.CSSProperties["objectFit"]

	/**
	 * Определяет позицию изображения внутри контейнера.
	 * Используется стандартное CSS-свойство `object-position`.
	 * - Формат: "x y", где x и y могут быть значениями вроде "left", "center", "right", "top", "bottom" или процентами.
	 * @default "center center"
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/object-position
	 */
	objectPosition?: React.CSSProperties["objectPosition"]

	/**
	 * Ширина изображения. Может быть строкой (например, "100%"), числом (в пикселях) или "auto".
	 * @default "100%"
	 */
	width?: string

	/**
	 * Высота изображения. Может быть строкой (например, "100%") или числом (в пикселях).
	 * @default "100%"
	 */
	height?: string

	/**
	 * Основной URL изображения (формат png/jpg). Обязательное поле.
	 */
	src: string

	/**
	 * Опциональный URL изображения в формате webp. Если браузер поддерживает webp, будет использован этот URL.
	 */
	webpSrc?: string

	/**
	 * Альтернативный текст для изображения. Используется для доступности и SEO.
	 * @default "image"
	 */
	alt: string

	/**
	 * Атрибут srcSet для указания нескольких источников изображения с разным разрешением.
	 */
	srcSet?: string

	/**
	 * Атрибут sizes для указания размеров изображения в разных условиях (например, медиа-запросы).
	 */
	sizes?: string

	/**
	 * Дополнительные CSS-классы для контейнера изображения.
	 */
	className?: string

	/**2
	 * Дополнительные inline-стили для контейнера изображения.
	 */
	style?: React.CSSProperties

	/**
	 * Компонент, который отображается в случае ошибки загрузки изображения.
	 * Если не указан, отображается текст из свойства `alt`.
	 */
	errorComponent?: React.ReactNode

	/**
	 * Определяет, нужно ли использовать размытый placeholder.
	 * - "blur": Использовать размытый placeholder.
	 * - "empty": Не использовать placeholder.
	 * @default "empty"
	 */
	placeholder?: "blur" | "empty"

	/**
	 * Base64-encoded изображение с низким разрешением, которое будет использоваться как placeholder.
	 * Пока основное изображение загружается, будет отображаться это размытое изображение.
	 */
	blurDataURL?: string

	/**
	 * Определяет, как изображение должно быть загружено.
	 * - "lazy": Отложенная загрузка изображения до момента, когда оно окажется близко к области видимости.
	 * - "eager": Загрузка изображения сразу, независимо от его положения на странице.
	 * - "auto": Браузер сам решает, когда загружать изображение.
	 * @default "lazy"
	 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-loading
	 */
	loading?: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>["loading"]

	/**
	 * Компонент, который отображается во время загрузки изображения.
	 */
	loader?: React.ReactNode
}
